'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _lodash = require('lodash.throttle');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* global window, document */


var propTypes = {
  once: _propTypes2.default.bool,
  throttleInterval: function throttleInterval(props, propName, component) {
    var currentProp = props[propName];
    if (!Number.isInteger(currentProp) || currentProp < 0) {
      return new Error('The ' + propName + ' prop you provided to ' + component + ' is not a valid integer >= 0.');
    }
    return null;
  },

  children: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.arrayOf(_propTypes2.default.element)]),
  style: _propTypes2.default.object,
  className: _propTypes2.default.string,
  offset: _propTypes2.default.number
};

var defaultProps = {
  once: false,
  throttleInterval: 150,
  style: null,
  className: null,
  offset: 0,
  children: null
};

var TrackVisibility = function (_Component) {
  _inherits(TrackVisibility, _Component);

  function TrackVisibility(props) {
    _classCallCheck(this, TrackVisibility);

    var _this = _possibleConstructorReturn(this, (TrackVisibility.__proto__ || Object.getPrototypeOf(TrackVisibility)).call(this, props));

    _this.state = {
      isVisible: false
    };
    _this.isComponentVisible = _this.isComponentVisible.bind(_this);
    /* Store reference to be able to remove the event listener */
    _this.throttleCb = (0, _lodash2.default)(_this.isComponentVisible, _this.props.throttleInterval);
    _this.setNodeRef = function (ref) {
      _this.nodeRef = ref;
    };
    return _this;
  }

  _createClass(TrackVisibility, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.attachListener();
      this.isComponentVisible();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.removeListener();
    }
  }, {
    key: 'getPropsToRender',
    value: function getPropsToRender() {
      var props = {};

      this.props.className !== null && (props.className = this.props.className);
      this.props.style !== null && (props.style = this.props.style);
      this.props.offset !== 0 && (props.offset = this.props.offset);

      return props;
    }
  }, {
    key: 'getChildProps',
    value: function getChildProps() {
      var _this2 = this;

      var props = {};
      Object.keys(this.props).forEach(function (key) {
        if (!{}.hasOwnProperty.call(TrackVisibility.defaultProps, key)) {
          props[key] = _this2.props[key];
        }
      });
      return props;
    }
  }, {
    key: 'getChildren',
    value: function getChildren() {
      var _this3 = this;

      return _react2.default.Children.map(this.props.children, function (child) {
        return _react2.default.cloneElement(child, _extends({}, _this3.getChildProps(), { isVisible: _this3.state.isVisible }));
      });
    }
  }, {
    key: 'isComponentVisible',
    value: function isComponentVisible() {
      var rect = this.nodeRef.getBoundingClientRect();
      var html = document.documentElement;
      var offset = this.props.offset;

      if (rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight + offset || html.clientHeight + offset) && rect.right <= (window.innerWidth + offset || html.clientWidth + offset)) {
        this.props.once && this.removeListener();
        !this.state.isVisible && this.setState({ isVisible: true });
      } else {
        this.state.isVisible && this.setState({ isVisible: false });
      }
    }
  }, {
    key: 'attachListener',
    value: function attachListener() {
      window.addEventListener('scroll', this.throttleCb);
      window.addEventListener('resize', this.throttleCb);
    }
  }, {
    key: 'removeListener',
    value: function removeListener() {
      window.removeEventListener('scroll', this.throttleCb);
      window.removeEventListener('resize', this.throttleCb);
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        _extends({ ref: this.setNodeRef }, this.getPropsToRender()),
        this.getChildren()
      );
    }
  }]);

  return TrackVisibility;
}(_react.Component);

exports.default = TrackVisibility;


TrackVisibility.propTypes = propTypes;
TrackVisibility.defaultProps = defaultProps;