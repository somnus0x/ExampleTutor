{
  "_args": [
    [
      {
        "raw": "react-visibility-sensor",
        "scope": null,
        "escapedName": "react-visibility-sensor",
        "name": "react-visibility-sensor",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/Mistral/Documents/Coding/CUTUTOR/Demo"
    ]
  ],
  "_from": "react-visibility-sensor@latest",
  "_id": "react-visibility-sensor@3.10.0",
  "_inCache": true,
  "_location": "/react-visibility-sensor",
  "_nodeVersion": "6.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-visibility-sensor-3.10.0.tgz_1496795252794_0.8292688694782555"
  },
  "_npmUser": {
    "name": "joshwnj",
    "email": "josh@x-team.com"
  },
  "_npmVersion": "5.0.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-visibility-sensor",
    "scope": null,
    "escapedName": "react-visibility-sensor",
    "name": "react-visibility-sensor",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/react-visibility-sensor/-/react-visibility-sensor-3.10.0.tgz",
  "_shasum": "4c4635745e83d1188d409827e7be51d177cc6a8d",
  "_shrinkwrap": null,
  "_spec": "react-visibility-sensor",
  "_where": "/Users/Mistral/Documents/Coding/CUTUTOR/Demo",
  "author": {
    "name": "joshwnj"
  },
  "browserify-shim": {
    "react": "global:React",
    "react-dom": "global:ReactDOM"
  },
  "bugs": {
    "url": "https://github.com/joshwnj/react-visibility-sensor/issues"
  },
  "dependencies": {
    "create-react-class": "^15.5.1",
    "prop-types": "^15.5.4"
  },
  "description": "Sensor component for React that notifies you when it goes in or out of the window viewport.",
  "devDependencies": {
    "browserify": "^5.11.2",
    "browserify-shim": "^3.8.12",
    "es5-shim": "^4.1.0",
    "gh-pages": "^0.2.0",
    "karma": "^0.12.31",
    "karma-chrome-launcher": "^0.1.4",
    "karma-mocha": "^0.1.9",
    "karma-phantomjs-launcher": "^0.1.4",
    "mocha": "^1.21.4",
    "react": "^0.14.0 || ^15.0.0",
    "react-dom": "^0.14.0 || ^15.0.0",
    "reactify": "^1.1.1",
    "uglify-js": "^3.0.15"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-hmCPna9YjwMT9Ey8N9w5Z3VLeUyCmv5jJgOFZA296NDvti8BiXiMjArothaTom2q/WVrlYp2yx9EZcMLJI3dfw==",
    "shasum": "4c4635745e83d1188d409827e7be51d177cc6a8d",
    "tarball": "https://registry.npmjs.org/react-visibility-sensor/-/react-visibility-sensor-3.10.0.tgz"
  },
  "gitHead": "3001b84ab6d037e0cef57b66db3d5b3d0c66f920",
  "homepage": "https://github.com/joshwnj/react-visibility-sensor#readme",
  "keywords": [
    "react",
    "react-component",
    "visibility"
  ],
  "license": "MIT",
  "main": "visibility-sensor.js",
  "maintainers": [
    {
      "name": "eek",
      "email": "raduamarie@gmail.com"
    },
    {
      "name": "joshwnj",
      "email": "josh@x-team.com"
    },
    {
      "name": "kof",
      "email": "oleg008@gmail.com"
    },
    {
      "name": "kompot",
      "email": "kompotik@gmail.com"
    }
  ],
  "name": "react-visibility-sensor",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^0.14.0 || ^15.0.0",
    "react-dom": "^0.14.0 || ^15.0.0"
  },
  "readme": "React Visibility Sensor\n====\n\n[![Build Status](https://secure.travis-ci.org/joshwnj/react-visibility-sensor.png)](http://travis-ci.org/joshwnj/react-visibility-sensor)\n\nSensor component for React that notifies you when it goes in or out of the window viewport.\n\nInstall\n----\n\n`npm install react-visibility-sensor`\n\n### Including the script directly\n\nUseful if you want to use with bower, or in a plain old `<script>` tag.\n\nIn this case, make sure that `React` and `ReactDOM` are already loaded and globally accessible.\n\n- Plain: <https://unpkg.com/react-visibility-sensor@3.4.0/dist/visibility-sensor.js>\n- Minified <https://unpkg.com/react-visibility-sensor@3.4.0/dist/visibility-sensor.min.js>\n\nTake a look at the [umd example](./example-umd/) to see this in action\n\nExample\n----\n\n[View the example](https://joshwnj.github.io/react-visibility-sensor/)\n\nTo run the example locally:\n\n- `npm run build-example`\n- open `example/index.html` in a browser\n\nGeneral usage goes something like:\n\n```js\nfunction render () {\n  var VisibilitySensor = require('react-visibility-sensor');\n\n  var onChange = function (isVisible) {\n    console.log('Element is now %s', isVisible ? 'visible' : 'hidden');\n  };\n\n  return (\n    <VisibilitySensor onChange={onChange} />\n  );\n}\n```\n\nYou can also pass a child function, which can be convenient if you don't need to store the visibility anywhere:\n\n```js\nreturn (\n  <VisibilitySensor>\n    {({isVisible}) =>\n      <div>I am {isVisible ? 'visible' : 'invisible'}</div>\n    }\n  </VisibilitySensor>\n);\n```\n\nProps\n----\n\n- `onChange`: callback for whenever the element changes from being within the window viewport or not. Function is called with 1 argument `(isVisible: boolean)`\n- `active`: (default `true`) boolean flag for enabling / disabling the sensor.  When `active !== true` the sensor will not fire the `onChange` callback.\n- `partialVisibility`: (default `false`) consider element visible if only part of it is visible. Also possible values are - 'top', 'right', 'bottom', 'left' - in case it's needed to detect when one of these become visible explicitly.\n- `offset`: (default `{}`) with offset you can define amount of px from one side when the visibility should already change. So in example setting `offset={{top:10}}` means that the visibility changes hidden when there is less than 10px to top of the viewport. Offset works along with `partialVisibility`\n- `minTopValue`: (default `0`) consider element visible if only part of it is visible and a minimum amount of pixels could be set, so if at least 100px are in viewport, we mark element as visible.\n- `intervalCheck`: (default `true`) the default usage of Visibility Sensor is to trigger a check on user scrolling, by checking this as true, it gives you the possibility to check if the element is in view even if it wasn't because of a user scroll\n- `intervalDelay`: (default `1500`) integer, number of milliseconds between checking the element's position in relation the the window viewport. Making this number too low will have a negative impact on performance.\n- `scrollCheck`: (default: `false`) by making this true, the scroll listener is enabled.\n- `scrollDelay`: (default: `250`) is the debounce rate at which the check is triggered. Ex: 250ms after the user stopped scrolling.\n- `scrollThrottle`: (default: `-1`) by specifying a value > -1, you are enabling throttle instead of the delay to trigger checks on scroll event. Throttle supercedes delay.\n- `resizeCheck`: (default: `false`) by making this true, the resize listener is enabled. Resize listener only listens to the window.\n- `resizeDelay`: (default: `250`) is the debounce rate at which the check is triggered. Ex: 250ms after the user stopped resizing.\n- `resizeThrottle`: (default: `-1`) by specifying a value > -1, you are enabling throttle instead of the delay to trigger checks on resize event. Throttle supercedes delay.\n- `containment`: (optional) element to use as a viewport when checking visibility. Default behaviour is to use the browser window as viewport.\n- `delayedCall`: (default `false`) if is set to true, wont execute on page load ( prevents react apps triggering elements as visible before styles are loaded )\n- `children`: can be a React element or a function.  If you provide a function, it will be called with 1 argument `{isVisible: ?boolean, visibilityRect: Object}`\n\nIt's possible to use both `intervalCheck` and `scrollCheck` together. This means you can detect most visibility changes quickly with `scrollCheck`, and an `intervalCheck` with a higher `intervalDelay` will act as a fallback for other visibility events, such as resize of a container.\n\nThanks\n----\n\nSpecial thanks to contributors:\n\n- Andrew Hong\n- Oleg Slobodskoi\n- EugeneHlushko\n- Stefan B\n- Radu-Sebastian Amarie\n- Roope Merikukka\n- Christian Davis\n- Anton Fedchenko\n- Mateusz Burzy≈Ñski\n- Zak Linder\n- Andarist\n- Andy Edwards\n- Bram Schulting\n- Dan Abramov\n- Daniel Stefanovic\n- Eric Bower\n- Julien Bachmann\n- Neehar Venugopal\n- Rubens Mariuzzo\n- Tim Tyrrell\n\nLicense\n----\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/joshwnj/react-visibility-sensor.git"
  },
  "scripts": {
    "build": "npm run build-umd && npm run build-minify",
    "build-example": "mkdir -p example/dist && browserify -t reactify -o example/dist/bundle.js example/main.js",
    "build-minify": "uglifyjs -o dist/visibility-sensor.min.js dist/visibility-sensor.js",
    "build-test": "browserify -t reactify -o tests/bundle.js tests/visibility-sensor-spec.jsx",
    "build-umd": "browserify -u react -u react-dom -t browserify-shim --standalone VisibilitySensor -o dist/visibility-sensor.js visibility-sensor.js",
    "clean": "rm -rf dist && mkdir dist",
    "prebuild": "npm run clean",
    "prepublish": "npm run build",
    "publish-gh-pages": "npm run build-example && ./bin/publish-gh-pages",
    "test": "npm run build-test && ./node_modules/karma/bin/karma start --single-run"
  },
  "version": "3.10.0"
}
